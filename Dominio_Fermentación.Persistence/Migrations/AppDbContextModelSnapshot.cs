// <auto-generated />
using System;
using Dominio_Fermentación.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Dominio_Fermentación.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AutomationDeviceUnidad", b =>
                {
                    b.Property<Guid>("AutomationDevicesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnidadesId")
                        .HasColumnType("uuid");

                    b.HasKey("AutomationDevicesId", "UnidadesId");

                    b.HasIndex("UnidadesId");

                    b.ToTable("AutomationDeviceUnidad");
                });

            modelBuilder.Entity("Dominio_Fermentación.Entities.AutomationDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AutomationDevices", (string)null);
                });

            modelBuilder.Entity("Dominio_Fermentación.Entities.Batch", b =>
                {
                    b.Property<DateTime>("Initial_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Final_Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Etapa_Proceso")
                        .HasColumnType("integer");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Namelote")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("producto")
                        .HasColumnType("integer");

                    b.HasKey("Initial_Date", "Final_Date");

                    b.ToTable("Batch", (string)null);
                });

            modelBuilder.Entity("Dominio_Fermentación.Entities.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Operations", (string)null);
                });

            modelBuilder.Entity("Dominio_Fermentación.Entities.Unidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActiveOperationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Estado")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActiveOperationId");

                    b.ToTable("Unitdades", (string)null);
                });

            modelBuilder.Entity("Dominio_Fermentación.Entities.Variable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Medicion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("Variables", (string)null);
                });

            modelBuilder.Entity("Dominio_Fermentación.Records.EquipmentStateChangeRecords", b =>
                {
                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("OccurringTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("NewState")
                        .HasColumnType("integer");

                    b.HasKey("EquipmentId", "OccurringTime");

                    b.ToTable("StateChangeRecords", (string)null);
                });

            modelBuilder.Entity("Dominio_Fermentación.Entities.Programmable_Logic_Controller", b =>
                {
                    b.HasBaseType("Dominio_Fermentación.Entities.AutomationDevice");

                    b.ToTable("Programmable_Logic_Controller", (string)null);
                });

            modelBuilder.Entity("AutomationDeviceUnidad", b =>
                {
                    b.HasOne("Dominio_Fermentación.Entities.AutomationDevice", null)
                        .WithMany()
                        .HasForeignKey("AutomationDevicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio_Fermentación.Entities.Unidad", null)
                        .WithMany()
                        .HasForeignKey("UnidadesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio_Fermentación.Entities.AutomationDevice", b =>
                {
                    b.OwnsOne("Dominio_Fermentación.ValueObjects.Dirección_Red", "Address", b1 =>
                        {
                            b1.Property<Guid>("AutomationDeviceId")
                                .HasColumnType("uuid");

                            b1.HasKey("AutomationDeviceId");

                            b1.ToTable("AutomationDevices");

                            b1.WithOwner()
                                .HasForeignKey("AutomationDeviceId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio_Fermentación.Entities.Batch", b =>
                {
                    b.OwnsOne("Dominio_Fermentación.ValueObjects.UnitIdentificationCode", "Codelote", b1 =>
                        {
                            b1.Property<DateTime>("BatchInitial_Date")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("BatchFinal_Date")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("BatchInitial_Date", "BatchFinal_Date");

                            b1.ToTable("Batch");

                            b1.WithOwner()
                                .HasForeignKey("BatchInitial_Date", "BatchFinal_Date");
                        });

                    b.Navigation("Codelote")
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio_Fermentación.Entities.Operation", b =>
                {
                    b.HasOne("Dominio_Fermentación.Entities.Unidad", null)
                        .WithMany("Operations")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio_Fermentación.Entities.Unidad", b =>
                {
                    b.HasOne("Dominio_Fermentación.Entities.Operation", "ActiveOperation")
                        .WithMany()
                        .HasForeignKey("ActiveOperationId");

                    b.OwnsOne("Dominio_Fermentación.ValueObjects.UnitIdentificationCode", "Codeunidad", b1 =>
                        {
                            b1.Property<Guid>("UnidadId")
                                .HasColumnType("uuid");

                            b1.HasKey("UnidadId");

                            b1.ToTable("Unitdades");

                            b1.WithOwner()
                                .HasForeignKey("UnidadId");
                        });

                    b.Navigation("ActiveOperation");

                    b.Navigation("Codeunidad")
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio_Fermentación.Entities.Variable", b =>
                {
                    b.HasOne("Dominio_Fermentación.Entities.Unidad", null)
                        .WithMany("Variables")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Dominio_Fermentación.Entities.Unidad_de_medida", "Unidad", b1 =>
                        {
                            b1.Property<Guid>("VariableId")
                                .HasColumnType("uuid");

                            b1.HasKey("VariableId");

                            b1.ToTable("Variables");

                            b1.WithOwner()
                                .HasForeignKey("VariableId");
                        });

                    b.OwnsOne("Dominio_Fermentación.ValueObjects.Nodo_Comunicación", "Node", b1 =>
                        {
                            b1.Property<Guid>("VariableId")
                                .HasColumnType("uuid");

                            b1.HasKey("VariableId");

                            b1.ToTable("Variables");

                            b1.WithOwner()
                                .HasForeignKey("VariableId");
                        });

                    b.Navigation("Node")
                        .IsRequired();

                    b.Navigation("Unidad")
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio_Fermentación.Entities.Programmable_Logic_Controller", b =>
                {
                    b.HasOne("Dominio_Fermentación.Entities.AutomationDevice", null)
                        .WithOne()
                        .HasForeignKey("Dominio_Fermentación.Entities.Programmable_Logic_Controller", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio_Fermentación.Entities.Unidad", b =>
                {
                    b.Navigation("Operations");

                    b.Navigation("Variables");
                });
#pragma warning restore 612, 618
        }
    }
}
